image: registry.green-rabbit.net:5000/kimata/local_ubuntu:241105B

variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 1
    FF_USE_FASTZIP: "true"
    ARTIFACT_COMPRESSION_LEVEL: "fastest"

stages:
    - build-webapp
    - build-image
    - pre-test
    - test
    - deploy
    - renovate

build-angular:
    stage: build-webapp

    image: node:22.6
    script:
        - npm ci --cache .npm --prefer-offline
        - npm run build
    artifacts:
        paths:
            - dist/
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .npm/
            - node_modules/

build-image:
    stage: build-image

    needs:
        - build-angular

    variables:
        BUILDER: arm_builder

    script:
        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/hems_config.git
        - mv hems_config/rasp-water.yaml config.yaml

        - docker buildx create --driver docker-container --name ${BUILDER} --use --config /etc/buildkitd.toml
        - docker buildx use ${BUILDER}
        - docker buildx inspect --bootstrap
        - docker buildx build --provenance=false --progress=plain --platform linux/amd64,linux/arm64/v8 --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:latest --cache-to type=inline --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache,mode=max --build-arg IMAGE_BUILD_DATE=$(date --iso-8601=seconds) --push --tag ${CI_REGISTRY_IMAGE} .

test-prepare:
    stage: pre-test

    script:
        - rye sync

    artifacts:
        paths:
            - .venv
            - /root/.cache

    cache:
        key:
            files:
                - pyproject.toml

        paths:
            - .venv
            - /root/.cache

test-walk-through:
    stage: test

    needs:
        - job: build-angular
          artifacts: true
        - job: test-prepare
          artifacts: true

    script:
        - rye run pytest --timeout=60 --numprocesses=auto --verbosity=1 tests/test_basic.py

    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .venv

    artifacts:
        when: always
        paths:
            - tests/evidence/**

test-playwright:
    stage: test

    needs:
        - job: build-angular
          artifacts: true
        - job: test-prepare
          artifacts: true

    parallel:
        matrix:
            - TEST_NAME: test_time
            - TEST_NAME: test_valve
            - TEST_NAME: test_schedule
            - TEST_NAME: test_schedule_run
            - TEST_NAME: test_schedule_disable

    script:
        - |
          if [ "$TEST_NAME" != "test_time" ]; then
            docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true
          fi
        - rye run python -m playwright install
        - |
          if [ "$TEST_NAME" != "test_time" ]; then
            export GIT_SSL_NO_VERIFY=1
            git clone https://gitlab.green-rabbit.net/kimata/hems_config.git
            mv hems_config/rasp-water.yaml config.yaml
            rye run python ./flask/src/app.py -d 2>&1 > flask_log.txt &
          fi
        - rye run pytest --tracing on --output tests/evidence/playwright tests/test_playwright.py::${TEST_NAME}

    cache:
        key:
            files:
                - pyproject.toml
        paths:
            - .venv
            - /root/.cache

    artifacts:
        when: always
        paths:
            - flask_log.txt
            - tests/evidence/**

test-playwright-docker:
    stage: test

    needs:
        - build-image

    parallel:
        matrix:
            - TEST_NAME: test_time
            - TEST_NAME: test_valve
            - TEST_NAME: test_schedule
            - TEST_NAME: test_schedule_run
            - TEST_NAME: test_schedule_disable

    script:
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true
        - rye run python -m playwright install
        - |
          if [ "$TEST_NAME" != "test_time" ]; then
            docker pull ${CI_REGISTRY_IMAGE}
            CONTAINER_NAME="test-playwright-docker-${CI_JOB_ID}"
            docker run --rm --detach=true --tty=true --name ${CONTAINER_NAME} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./flask/src/app.py -d
            TARGET_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME})
            echo "Target: ${TARGET_IP}"
            rye run pytest --tracing on --output tests/evidence/playwright tests/test_playwright.py::${TEST_NAME} --host ${TARGET_IP}
            docker logs ${CONTAINER_NAME} > flask_log.txt
            docker stop ${CONTAINER_NAME}
          else
            rye run pytest --tracing on --output tests/evidence/playwright tests/test_playwright.py::${TEST_NAME}
          fi

    cache:
        key:
            files:
                - pyproject.toml
        paths:
            - .venv
            - /root/.cache

    artifacts:
        when: always
        paths:
            - flask_log.txt
            - tests/evidence/**

test-playwright-docker-demo:
    stage: test

    needs:
        - build-image

    parallel:
        matrix:
            - TEST_NAME: test_time
            - TEST_NAME: test_valve
            - TEST_NAME: test_schedule
            - TEST_NAME: test_schedule_run
            - TEST_NAME: test_schedule_disable

    script:
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true
        - rye run python -m playwright install
        - |
          if [ "$TEST_NAME" != "test_time" ]; then
            docker pull ${CI_REGISTRY_IMAGE}
            CONTAINER_NAME="test-playwright-docker-demo-${CI_JOB_ID}"
            docker run --rm --detach=true --tty=true --name ${CONTAINER_NAME} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./flask/src/app.py -d -c config.example.yaml
            TARGET_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME})
            echo "Target: ${TARGET_IP}"
            rye run pytest --tracing on --output tests/evidence/playwright tests/test_playwright.py::${TEST_NAME} --host ${TARGET_IP}
            docker logs ${CONTAINER_NAME} > flask_log.txt
            docker stop ${CONTAINER_NAME}
          else
            rye run pytest --tracing on --output tests/evidence/playwright tests/test_playwright.py::${TEST_NAME}
          fi

    cache:
        key:
            files:
                - pyproject.toml
        paths:
            - .venv
            - /root/.cache

    artifacts:
        when: always
        paths:
            - flask_log.txt
            - tests/evidence/**

test-healthz-docker:
    stage: test

    needs:
        - build-image

    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true

        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./flask/src/app.py -d

        - sleep 10
        - docker exec ${CI_JOB_NAME}-${CI_JOB_ID} ./flask/src/healthz.py

        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID} > flask_log.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        when: always
        paths:
            - flask_log.txt

pages:
    stage: test
    needs:
        - test-walk-through

    script:
        - mkdir -p public/
        - cp -r tests/evidence/* public/

    artifacts:
        paths:
            - public

    only:
        - master

deploy-webapp:
    stage: deploy

    needs:
        - test-walk-through
        - test-playwright
        - test-playwright-docker
        - test-playwright-docker-demo
        - test-healthz-docker

    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/rasp-water:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment rasp-water
    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
          when: never
        - when: on_success

deploy-webapp-demo:
    stage: deploy

    needs:
        - test-walk-through
        - test-playwright
        - test-playwright-docker
        - test-playwright-docker-demo
        - test-healthz-docker

    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/rasp-water:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment rasp-water-demo
    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
          when: never
        - when: on_success

renovate:
    stage: renovate
    image:
        name: registry.green-rabbit.net:5000/kimata/local_renovate:38

        entrypoint: [""]
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
    rules:
        - if: '$CI_COMMIT_BRANCH != "master"'
          when: never
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
        - changes:
            - renovate.json
