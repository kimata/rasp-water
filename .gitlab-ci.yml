image: docker:24.0-dind

stages:
    - build-webapp
    - build-image
    - test
    - deploy
    - renovate

build-angular:
    stage: build-webapp
    image: node:20.5
    script:
        - npm ci --cache .npm --prefer-offline
        - npm run build
    artifacts:
        paths:
            - dist/
    cache:
        key: npm
        paths:
            - .npm/

build-image:
    stage: build-image
    needs: ["build-angular"]
    dependencies:
        - build-angular

    image: registry.green-rabbit.net:5000/kimata/ubuntu-docker-build:d386d462

    variables:
        BUILDER: arm_builder

    script:
        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/hems_config.git
        - mv hems_config/rasp-water.yaml config.yaml
        - git config --global --add safe.directory ${PWD}

        - docker buildx create --name ${BUILDER} --config script/buildkitd.toml --use
        - docker buildx use ${BUILDER}
        - docker buildx build --platform linux/amd64,linux/arm64/v8
          --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache
          --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache
          --push --tag ${CI_REGISTRY_IMAGE} .
        # - docker buildx stop ${BUILDER}

test-flask:
    stage: test
    needs: ["build-angular"]
    dependencies:
        - build-angular

    image: registry.green-rabbit.net:5000/kimata/local_ubuntu:230805D

    script:
        - apt-get update

        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/hems_config.git
        - mv hems_config/rasp-water.yaml config.yaml

        - poetry install --no-interaction
        - poetry run pytest -vv tests/test_basic.py
    artifacts:
        when: always
        paths:
            - tests/evidence/**

test-playwright:
    stage: test
    needs: ["build-angular", "test-flask"]
    dependencies:
        - build-angular

    image: registry.green-rabbit.net:5000/kimata/local_ubuntu:230805D

    script:
        - apt-get update

        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/hems_config.git
        - mv hems_config/rasp-water.yaml config.yaml

        - poetry install --no-interaction --with test

        - poetry run ./flask/app/app.py -D > flask_log.txt 2>&1 &

        - apt-get install -y curl python3
        - curl -sSL https://install.python-poetry.org | python3 -
        - export PATH="/root/.local/bin:$PATH"

        - poetry run playwright install
        - poetry run pytest -vv tests/test_playwright.py

    artifacts:
        when: always
        paths:
            - flask_log.txt
            - tests/evidence/**

test-playwright-docker:
    stage: test
    needs: ["build-image", "test-flask"]

    image: registry.green-rabbit.net:5000/kimata/local_ubuntu:230805D

    script:
        - apt-get update

        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true

        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./flask/app/app.py -D

        - poetry install --no-interaction --with test
        - poetry run playwright install

        - poetry run pytest -vv tests/test_playwright.py
          --host $(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID})
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID} > flask_log.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        when: always
        paths:
            - flask_log.txt
            - tests/evidence/**

test-playwright-docker-demo:
    stage: test
    needs: ["build-image", "test-flask"]

    image: registry.green-rabbit.net:5000/kimata/local_ubuntu:230805D

    script:
        - apt-get update

        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true

        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./flask/app/app.py -D -c config.example.yaml

        - poetry install --no-interaction --with test
        - poetry run playwright install

        - poetry run pytest -vv tests/test_playwright.py
          tests/test_playwright.py
          --host $(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID})
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID} > flask_log.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        when: always
        paths:
            - flask_log.txt
            - tests/evidence/**

test-healthz-docker:
    stage: test
    needs: ["build-image"]

    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true

        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./flask/app/app.py -D

        - sleep 10
        - docker exec ${CI_JOB_NAME}-${CI_JOB_ID} ./flask/src/healthz.py

        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID} > flask_log.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        when: always
        paths:
            - flask_log.txt

deploy-webapp:
    stage: deploy
    needs: ["test-playwright-docker", "test-healthz-docker"]

    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/rasp-water:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment rasp-water
    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - changes:
              - flask/**/*
              - src/**/*

deploy-webapp-demo:
    stage: deploy
    needs: ["test-playwright-docker-demo", "test-healthz-docker"]

    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/rasp-water:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment rasp-water-demo
    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - changes:
              - flask/**/*
              - src/**/*

renovate:
    stage: renovate
    image:
        name: registry.green-rabbit.net:5000/kimata/local_renovate:35

        entrypoint: [""]
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
    rules:
        - if: $CI_COMMIT_BRANCH == "master"
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: always
        - changes:
              - renovate.json
