image: docker:24.0

stages:
    - build-webapp
    - build-image
    - test
    - renovate

build-angular:
    stage: build-webapp
    image: node:20.3
    script:
        - npm ci --cache .npm --prefer-offline
        - npm run build
    artifacts:
        paths:
            - dist/
    cache:
        key: npm
        paths:
            - .npm/

build-image:
    stage: build-image
    image: registry.green-rabbit.net:5000/kimata/ubuntu-docker-build:d386d462

    variables:
        BUILDER: arm_builder

    script:
        # - docker rm $(docker ps -a --filter "status=exited" -q) || true
        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/hems_config.git
        - mv hems_config/rasp-water.yaml config.yaml
        - docker buildx create --name ${BUILDER} --config script/buildkitd.toml --use
        - docker buildx use ${BUILDER}
        - docker buildx build --platform linux/amd64,linux/arm64/v8
          --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache
          --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache
          --push --tag ${CI_REGISTRY_IMAGE} .
    dependencies:
        - build-angular

test-cypress:
    stage: test
    image: cypress/included:12.13.0
    script:
        - npm ci --cache .npm --prefer-offline
        - npx start-server-and-test 'ng serve' http-get://localhost:4200/ 'npx cypress run'
    cache:
        key: npm
        paths:
            - .npm/

test-flask:
    stage: test
    image: registry.green-rabbit.net:5000/kimata/local_playwright:230616A
    script:
        - docker pull ${CI_REGISTRY_IMAGE}
        - docker run -t --rm --name ${CI_JOB_NAME} --label job=${CI_JOB_ID} -p 5000:5000 ${CI_REGISTRY_IMAGE} ./flask/app/app.py -D &
        - python3 -m pytest test/test_basic.py
        - docker stop ${CI_JOB_NAME}
    artifacts:
        when: always
        paths:
            - flask_log.txt
    dependencies:
        - build-angular

renovate:
    stage: renovate
    image:
        name: registry.green-rabbit.net:5000/kimata/local_renovate:35

        entrypoint: [""]
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
        - changes:
              - renovate.json
