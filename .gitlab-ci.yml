image: registry.green-rabbit.net:5000/kimata/local_ubuntu:250615_38f4fdb9

.playwright_test_matrix: &playwright_test_matrix
    - TEST_NAME: test_time
    - TEST_NAME: test_valve
    - TEST_NAME: test_schedule
    - TEST_NAME: test_schedule_run
    - TEST_NAME: test_schedule_disable

variables:
    UV_LINK_MODE: copy
    UV_PYTHON_INSTALL_DIR: ${CI_PROJECT_DIR}/.uv_python

stages:
    - generate-tag
    - build-webapp
    - build-image
    - pre-test
    - test
    - tag-latest
    - deploy
    - renovate

generate-tag:
    stage: generate-tag
    script:
        - echo "TAG=$(date +%y%m%d)_${CI_COMMIT_SHORT_SHA}" > tag.env
    artifacts:
        reports:
            dotenv: tag.env
        expire_in: 1 hour

build-angular:
    stage: build-webapp

    needs: []

    image: node:22.6
    script:
        - npm ci --cache .npm --prefer-offline
        - npm run build
    artifacts:
        paths:
            - dist/
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .npm/
            - node_modules/

build-image:
    stage: build-image

    needs:
        - generate-tag
        - build-angular

    variables:
        BUILDER: arm_builder

    script:
        - 'echo "Building: ${CI_REGISTRY_IMAGE}:${TAG}"'

        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/hems_config.git
        - mv hems_config/rasp-water.yaml config.yaml

        - docker buildx create --driver docker-container --name ${BUILDER} --use --config /etc/buildkitd.toml
        - docker buildx use ${BUILDER}
        - docker buildx inspect --bootstrap
        - docker buildx build --provenance=false --progress=plain --platform linux/amd64,linux/arm64/v8 --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:latest --cache-to type=inline --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache,mode=max --build-arg IMAGE_BUILD_DATE=$(date --iso-8601=seconds) --tag ${CI_REGISTRY_IMAGE}:${TAG} --push .


test-prepare:
    stage: pre-test

    needs: []

    script:
        - apt update
        - apt install --no-install-recommends --assume-yes swig

        - uv sync --locked --no-editable

    artifacts:
        paths:
            - .venv
            - .uv_python

        expire_in: 1 hour

    cache:
        - key:
            files:
                - pyproject.toml
                - .gitlab-ci.yml
            prefix: ${CI_COMMIT_REF_SLUG}-venv
          paths:
            - .venv
          policy: pull-push

        - key: ${CI_COMMIT_REF_SLUG}-uv-toolchain
          paths:
            - .uv_python
          policy: pull-push


test-walk-through:
    stage: test

    needs:
        - build-angular
        - test-prepare

    script:
        - uv run pytest --numprocesses=auto --junit-xml=tests/evidence/junit-report.xml tests/test_basic.py

    cache:
        - key:
            files:
                - pyproject.toml
                - .gitlab-ci.yml
            prefix: ${CI_COMMIT_REF_SLUG}-venv
          paths:
            - .venv
          policy: pull

        - key: ${CI_COMMIT_REF_SLUG}-uv-toolchain
          paths:
            - .uv_python
          policy: pull

    artifacts:
        when: always
        paths:
            - tests/evidence/**
        reports:
            junit: tests/evidence/junit-report.xml

test-playwright:
    stage: test

    needs:
        - build-angular
        - test-prepare


    parallel:
        matrix: *playwright_test_matrix

    script:
        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/hems_config.git
        - mv hems_config/rasp-water.yaml config.yaml

        - uv run playwright install --with-deps chromium # NOTE: キャッシュを使うより速い
        - uv run python ./flask/src/app.py -d 2>&1 > flask_log.txt &
        - uv run pytest --tracing on --output tests/evidence/playwright --junit-xml=tests/evidence/playwright-${TEST_NAME}-junit.xml tests/test_playwright.py::${TEST_NAME}

    cache:
        - key:
            files:
                - pyproject.toml
                - .gitlab-ci.yml
            prefix: ${CI_COMMIT_REF_SLUG}-venv
          paths:
            - .venv
          policy: pull

        - key: ${CI_COMMIT_REF_SLUG}-uv-toolchain
          paths:
            - .uv_python
          policy: pull

    artifacts:
        when: always
        paths:
            - tests/evidence/**
        reports:
            junit: tests/evidence/playwright-*-junit.xml

.test-playwright-docker-base:
    stage: test

    needs:
        - generate-tag
        - build-image
        - test-prepare

    parallel:
        matrix: *playwright_test_matrix

    variables:
        JOB_TYPE: docker
        CONFIG_ARGS: "-d"

    script:
        - docker ps --filter "label=test=${TEST_NAME}" --filter "label=job=test-playwright-${JOB_TYPE}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true
        - export CONTAINER_NAME="test-playwright-${JOB_TYPE}-${TEST_NAME}-${CI_JOB_ID}"
        - docker run --rm --detach=true --tty=true --name ${CONTAINER_NAME} --label job=test-playwright-${JOB_TYPE} --label test=${TEST_NAME} ${CI_REGISTRY_IMAGE}:${TAG} ./flask/src/app.py ${CONFIG_ARGS}

        - TARGET_IP=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME})
        - 'echo "Target: ${TARGET_IP}"'

        - uv run playwright install --with-deps chromium # NOTE: キャッシュを使うより速い
        - uv run pytest --tracing on --output tests/evidence/playwright --junit-xml=tests/evidence/playwright-${JOB_TYPE}-${TEST_NAME}-junit.xml "tests/test_playwright.py::${TEST_NAME}" --host ${TARGET_IP}

        - docker logs ${CONTAINER_NAME} > flask_log.txt
        - docker stop ${CONTAINER_NAME}

    cache:
        - key:
            files:
                - pyproject.toml
                - .gitlab-ci.yml
            prefix: ${CI_COMMIT_REF_SLUG}-venv
          paths:
            - .venv
          policy: pull

        - key: ${CI_COMMIT_REF_SLUG}-uv-toolchain
          paths:
            - .uv_python
          policy: pull

    artifacts:
        when: always
        paths:
            - tests/evidence/**
        reports:
            junit: tests/evidence/playwright-${JOB_TYPE}-*-junit.xml

test-playwright-docker:
    extends: .test-playwright-docker-base

test-playwright-docker-demo:
    extends: .test-playwright-docker-base
    variables:
        JOB_TYPE: docker-demo
        CONFIG_ARGS: "-d -c config.example.yaml"

test-healthz-docker:
    stage: test

    needs:
        - generate-tag
        - build-image

    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true

        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} --publish 0:5000 ${CI_REGISTRY_IMAGE}:${TAG} ./flask/src/app.py -d

        - sleep 1

        - APP_IP=$(docker inspect --format '{{ (index (index .NetworkSettings.Ports "5000/tcp") 0).HostIp }}' ${CI_JOB_NAME}-${CI_JOB_ID})
        - APP_PORT=$(docker inspect --format '{{ (index (index .NetworkSettings.Ports "5000/tcp") 0).HostPort }}' ${CI_JOB_NAME}-${CI_JOB_ID})
        - APP_URL="http://${APP_IP}:${APP_PORT}/rasp-water"
        - 'echo "APP_URL: ${APP_URL}"'
        - 'timeout 10 bash -c "until curl --fail \"${APP_URL}/api/sysinfo\"; do sleep 5; done" || true'

        - 'APP_PORT=$(docker port ${CI_JOB_NAME}-${CI_JOB_ID} 5000 | cut -d: -f2)'
        - APP_URL="http://localhost:${APP_PORT}/rasp-water"
        - 'timeout 10 bash -c "until curl --fail \"${APP_URL}/api/sysinfo\"; do sleep 5; done" || true'

        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}

        - sleep 1

        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID} > flask_log.txt
        - docker exec ${CI_JOB_NAME}-${CI_JOB_ID} ./flask/src/healthz.py
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}
    artifacts:
        when: always
        paths:
            - flask_log.txt

pages:
    stage: test
    needs:
        - test-walk-through

    script:
        - mkdir -p public/
        - cp -r tests/evidence/* public/

    artifacts:
        paths:
            - public

    only:
        - master


tag-latest:
    stage: tag-latest

    needs:
        - generate-tag
        - job: test-walk-through
          artifacts: false
        - job: test-playwright
          artifacts: false
        - job: test-playwright-docker
          artifacts: false
        - job: test-playwright-docker-demo
          artifacts: false
        - job: test-healthz-docker
          artifacts: false

    script:
        - 'echo "Tagging multi-arch image ${CI_REGISTRY_IMAGE}:${TAG} as latest"'
        - docker buildx imagetools create -t ${CI_REGISTRY_IMAGE}:latest ${CI_REGISTRY_IMAGE}:${TAG}

    rules:
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success


deploy:
    stage: deploy

    needs:
        - generate-tag
        - job: test-walk-through
          artifacts: false
        - job: test-playwright
          artifacts: false
        - job: test-playwright-docker
          artifacts: false
        - job: test-playwright-docker-demo
          artifacts: false
        - job: test-healthz-docker
          artifacts: false

    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]

    script:
        - 'IMAGE="${CI_REGISTRY_IMAGE}:${TAG}"'
        - 'echo "Deploying image: $IMAGE"'

        - kubectl config get-contexts
        - kubectl config use-context kimata/rasp-water:pod-rollout

        - kubectl --insecure-skip-tls-verify=true -n hems set image deployment/rasp-water rasp-water=${IMAGE}
        - kubectl --insecure-skip-tls-verify=true -n hems set image deployment/rasp-water-demo rasp-water-demo=${IMAGE}

        - kubectl --insecure-skip-tls-verify=true -n hems rollout status deployment/rasp-water --timeout=120s
        - kubectl --insecure-skip-tls-verify=true -n hems rollout status deployment/rasp-water-demo --timeout=120s

        - 'echo "✓ All deployments updated successfully to $TAG"'


    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success


renovate:
    stage: renovate
    image:
        name: registry.green-rabbit.net:5000/kimata/local_renovate:38

        entrypoint: [""]
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
    rules:
        - if: '$CI_COMMIT_BRANCH != "master"'
          when: never
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
        - changes:
            - renovate.json
