[project]
name = "rasp-water"
version = "0.1.0"
description = "Raspberry Pi を使って自動的に水やりをするシステムです．"
authors = [
    { name = "KIMATA Tetsuya", email = "kimata@green-rabbit.net" }
]
readme = "README.md"
requires-python = ">= 3.10"

dependencies = [
    "rpi-gpio>=0.7.1",
    "flask>=3.0.3",
    "flask-cors>=4.0.1",
    "pyyaml>=6.0.1",
    "docopt>=0.6.2",
    "fluent-logger>=0.11.1",
    "influxdb-client[ciso]>=1.44.0",
    "coloredlogs>=15.0.1",
    "psutil>=6.0.0",
    "pytz>=2024.1",
    # NOTE: 1.2.2 で入ったタイムゾーン周りの修正が悪さをするので，一旦 1.2.1 に固定する．
    # 1.2.2 移行にする場合，おそらくテストコードも修正必要．
    "schedule==1.2.1",
    "slack-sdk>=3.31.0",
    "uptime>=3.0.1",
    "tzlocal>=5.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "flaky>=3.8.1",
    "playwright>=1.45.1",
    "pytest-cov>=5.0.0",
    "pytest-freezegun>=0.4.2",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.14.0",
    "pytest-playwright>=0.5.1",
    "pytest-xdist>=3.6.1",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["flask/lib"]

[tool.pytest.ini_options]
minversion = "6.0"

addopts = "--verbose --log-cli-level=DEBUG --log-file-level=DEBUG --log-format=\"%(asctime)s %(levelname)s %(message)s\" --log-format=\"%(asctime)s %(levelname)s [%(filename)s:%(lineno)s %(funcName)s] %(message)s\" --capture=sys  --html=tests/evidence/index.htm --self-contained-html"

testpaths = [
    "tests",
]
filterwarnings = [
    "ignore:The hookimpl CovPlugin.pytest_configure_node uses",
    "ignore:The hookimpl CovPlugin.pytest_testnodedown uses",
    "ignore::DeprecationWarning:pytest_freezegun",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",

  # 以下，未使用関数
  # config.py
  "def get_db_config",

  # logger.py
  "class GZipRotator",
  "def log_formatter",
  "if log_dir_path is not None:",
  "if log_queue is not None:",
  "if is_str_log:",

  # notify_slack.py
  "def info",
  "def error_img",
  "def error_with_image",

  # webapp_event.py
  "def notify_watch_impl",
  "def notify_watch",
  "def stop_watch",

  # webapp_log.py
  "elif level == APP_LOG_LEVEL.WARN:",

  # flask_util.py
  "def remote_host",
]

[tool.coverage.html]
directory = "tests/evidence/coverage"
